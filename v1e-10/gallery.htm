<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>V1 Engineering Gallery</title>
  <!-- TODO:P0 Save local copy of required scripts to remove wifi dependency -->
  <!-- Comfortaa Font -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@400;700&display=swap" />
  <!-- Font Awesome CSS for SVG icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <style>
    /* --- Base reset --- */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: 'Comfortaa';
      background-color: #f4f4f4;
      color: #333;
      line-height: 1.25rem;
    }
    h1 { font-size: "3rem" }
    h2 { font-size: "2.25rem" }
    h3 { font-size: "1.75rem" }
    h4 { font-size: "1.5rem" }
    h5 { font-size: "1.25rem"; color : "#bcbcbc" }
    h6 { font-size: "1rem"; color : "#bcbcbc" }    
    /* --- Banner (header) styles --- */
    .banner {
      background-color: #222;
      color: #fff;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 10px 16px;
      position: sticky;
      top: 0;
      z-index: 100;
    }
    .logo {
      display: flex;
      align-items: center;
    }
    .logo-img {
      height: 40px;
      margin-right: 10px;
    }
    .logo-text {
      font-size: 1.5em;
      font-weight: bold;
    }
    .banner-controls {
      display: flex;
      align-items: center;
      gap: 12px;
      position: relative;
    }
    .banner-controls input {
      padding: 6px 10px;
      font-size: 1em;
      border: none;
      border-radius: 4px;
    }
    .settings-container {
      position: relative;
    }
    #settings-btn {
      background: none;
      border: none;
      color: #fff;
      font-size: 1.5em;
      cursor: pointer;
    }
    .dropdown-menu {
      display: none;
      position: absolute;
      right: 0;
      top: 40px;
      background: #fff;
      border: 1px solid #ccc;
      border-radius: 4px;
      min-width: 150px;
      z-index: 10;
    }
    .dropdown-menu a {
      display: block;
      padding: 8px 12px;
      text-decoration: none;
      color: #333;
      font-size: 0.9em;
    }
    .dropdown-menu a:hover {
      background: #f0f0f0;
    }
    /* --- Gallery (masonry layout) styles --- */
    #gallery {
      column-width: 360px;
      column-gap: 8px;
      padding: 8px;
    }
    .project-card {
      display: inline-block;
      width: 100%;
      margin: 0 0 8px;
      background: #fff;
      border-radius: 1rem;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      overflow: hidden;
      break-inside: avoid;
      position: relative;
    }
    .project-meta {
      color: #bcbcbc;
    }
    .image-container {
      width: 100%;
      overflow: hidden;
    }
    .image-container img {
      display: block;
      width: 100%;
      height: auto;
    }
    .card-footer {
      position: relative;
      padding: 8px;
      background-color: #3B3B3B;
      color: #fff;
      font-size: 0.8rem;
      padding-right:90px; /* MUST Match Tile Width */
    }
    .project-info p {
      margin: 4px 0;
    }
    .avatar {
      width: 24px;
      height: 24px;
      border-radius: 50%;
      vertical-align: middle;
      margin-right: 4px;
    }
    /* QR code image styling */
    .qr-code {
      position: absolute;
      bottom: 0px;
      right: 0px;
      width: 90px;  /* 50% larger than 60px */
      height: 90px;
      border-radius: 1rem;
    }
  </style>
</head>
<body>
  <!-- Banner with logo, filter input, and settings -->
  <header class="banner">
    <div class="logo">
      <img src="./logo.png" alt="V1 Engineering Logo" class="logo-img">
      <span class="logo-text"></span>
    </div>
    <div class="banner-controls">
      <input type="text" id="filter-input" placeholder="Filter projects...">
      <div class="settings-container">
        <button id="settings-btn"><i class="fas fa-cog"></i></button>
        <div id="settings-menu" class="dropdown-menu">
          <a href="#" id="toggle-qr">Hide QR Codes</a>
        </div>
      </div>
    </div>
  </header>

  <!-- Gallery container using a masonry layout -->
  <main id="gallery"></main>

  <script>
    /*********************************************************************
     * Constants and Magic Numbers
     *********************************************************************/
    // Layout constants
    const MIN_COLUMN_WIDTH = 360; // px, minimum column width for gallery masonry
    const CARD_GAP = 16; // px, gap between cards
    const QR_CODE_SIZE = 90; // px, width and height for QR code image (50% larger than 60px)
    const AVATAR_DISPLAY_SIZE = 24; // px, display size for user avatar

    // CSV and file paths
    const TOPICS_CSV_PATH = './.output/gallery-lowrider-cnc/gallery-lowrider-cnc_topics.csv';
    const IMAGES_CSV_PATH = './.output/gallery-lowrider-cnc/gallery-lowrider-cnc_images.csv';
    const USERS_CSV_PATH  = './.output/users.csv'; // extra user info if needed
    const IMAGE_DIR       = './.output/gallery-lowrider-cnc/';
    const QR_CODE_DIR     = './.output/gallery-lowrider-cnc/qr/';
    const USER_AVATAR_DIR = './.output/users/';

    // File naming patterns
    const QR_CODE_PREFIX = 'qr_topic_';
    const QR_CODE_SUFFIX = '.png';

    // Lazy loading observer threshold
    const LAZY_LOAD_THRESHOLD = 0.1; // 10% visibility

    // Settings defaults
    let showQRCodes = true;

    /*********************************************************************
     * Utility functions
     *********************************************************************/
    // Simple CSV parser (assumes no commas inside values)
    // function parseCSV(csvText) {
    //   const lines = csvText.trim().split('\n');
    //   const headers = lines[0].split(',').map(h => h.trim());
    //   return lines.slice(1).map(line => {
    //     const values = line.split(',').map(v => v.trim());
    //     const obj = {};
    //     headers.forEach((header, i) => {
    //       obj[header] = values[i];
    //     });
    //     return obj;
    //   });
    // }

    // Helper function to parse a single CSV line
    function parseCSVLine(line) {
      const result = [];
      let current = "";
      let inQuotes = false;
      for (let i = 0; i < line.length; i++) {
        const char = line[i];
        if (inQuotes) {
          if (char === '"') {
            // If the next character is also a quote, treat it as an escaped quote
            if (i + 1 < line.length && line[i + 1] === '"') {
              current += '"';
              i++; // Skip the escaped quote
            } else {
              inQuotes = false; // End of quoted field
            }
          } else {
            current += char;
          }
        } else {
          if (char === '"') {
            inQuotes = true;
          } else if (char === ',') {
            result.push(current);
            current = "";
          } else {
            current += char;
          }
        }
      }
      // Push any remaining value
      result.push(current);
      return result;
    }

    // Main CSV parser function that uses the helper for each line
    function parseCSV(csvText) {
      // Split text into lines (handles both \n and \r\n)
      const lines = csvText.split(/\r?\n/).filter(line => line.trim().length > 0);
      if (lines.length === 0) return [];
      // Assume the first line contains the headers
      const headers = parseCSVLine(lines[0]).map(h => h.trim());
      const rows = [];
      // Process remaining lines as data rows
      for (let i = 1; i < lines.length; i++) {
        const values = parseCSVLine(lines[i]);
        const row = {};
        headers.forEach((header, j) => {
          row[header] = values[j] ? values[j].trim() : '';
        });
        rows.push(row);
      }
      return rows;
    }


    function formatAbsDate(dateStr) {
      const date = new Date(dateStr);
      const year = date.getFullYear() % 2000;
      const month = ('0' + (date.getMonth() + 1)).slice(-2);
      const day = ('0' + date.getDate()).slice(-2);
      return `'${year}/${month}/${day}`;
    }

    // Format a relative date string
    function formatRelDate(dateStr) {
      const date = new Date(dateStr);
      const now = new Date();
      const diffSeconds = (now - date) / 1000;

      if (diffSeconds < 5) {
        return "just now";
      } else if (diffSeconds < 60) {
        return Math.floor(diffSeconds) + "s";
      } else if (diffSeconds < 3600) {
        return Math.floor(diffSeconds / 60) + "m";
      } else if (diffSeconds < 86400) {
        return Math.floor(diffSeconds / 3600) + "h";
      } else if (diffSeconds < 604800) { // less than 7 days
        const days = Math.floor(diffSeconds / 86400);
        return days === 1 ? "yesterday" : days + "d";
      } else if (diffSeconds < 2629800) { // less than 1 month (~30.44 days)
        return Math.floor(diffSeconds / 604800) + "w";
      } else if (diffSeconds < 31557600) { // less than 1 year (~365.25 days)
        return Math.floor(diffSeconds / 2629800) + "mo";
      } else {
        // For dates over one year, display abbreviated month and two-digit year, e.g., "Feb '24"
        const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        const monthAbbrev = months[date.getMonth()];
        const year = date.getFullYear().toString().slice(-2);
        return `${monthAbbrev} '${year}`;
      }
    }


    // Check if filename has a .jpg or .jpeg extension (case-insensitive)
    function isJpeg(filename) {
      const lower = filename.toLowerCase();
      return lower.endsWith('.jpg') || lower.endsWith('.jpeg');
    }

    // Create an element with optional class names and innerText
    function createElem(tag, classNames, innerText) {
      const el = document.createElement(tag);
      if (classNames) el.className = classNames;
      if (innerText && -1 == innerText.toLowerCase().indexOf("<script")) {
        el.innerHTML = innerText;
      }
      return el;
    }

    /*********************************************************************
     * Lazy loading for images using IntersectionObserver
     *********************************************************************/
    const lazyLoadObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          if (img.dataset.src) {
            img.src = img.dataset.src;
            img.removeAttribute('data-src');
          }
          observer.unobserve(img);
        }
      });
    }, { threshold: LAZY_LOAD_THRESHOLD });

    /*********************************************************************
     * Main function to load CSVs, process data, and render gallery
     *********************************************************************/
    async function initGallery() {
      try {
        // Load CSV files concurrently
        const [topicsResponse, imagesResponse] = await Promise.all([
          fetch(TOPICS_CSV_PATH),
          fetch(IMAGES_CSV_PATH)
        ]);
        const topicsText = await topicsResponse.text();
        const imagesText = await imagesResponse.text();

        const topics = parseCSV(topicsText);
        const images = parseCSV(imagesText);

        // Map topic_id -> default image filename (first .jpg/.jpeg encountered)
        const topicImageMap = {};
        images.forEach(imgObj => {
          const topicId = imgObj.topic_id;
          let filename = (imgObj.image_filename || imgObj.file || '');
          if (isJpeg(filename) && !topicImageMap[topicId]) {
            topicImageMap[topicId] = filename;
          }
        });

        // Render gallery items (only those topics with a valid image)
        const galleryContainer = document.getElementById('gallery');
        topics.forEach(topic => {
          const topicId = topic.topic_id;
          const imageFilename = topicImageMap[topicId];
          if (!imageFilename) return; // skip if no valid image

          // Create card container
          const card = createElem('div', 'project-card');

          // Image container and lazy loaded image
          const imgContainer = createElem('div', 'image-container');
          const img = document.createElement('img');
          img.dataset.src = IMAGE_DIR + imageFilename;
          img.setAttribute('loading', 'lazy');
          img.alt = topic.name || 'Project Image';
          imgContainer.appendChild(img);
          card.appendChild(imgContainer);

          // Card footer with project details
          const footer = createElem('div', 'card-footer');

          // Project info section
          const info = createElem('div', 'project-info');

          // Topic name/title
          const nameP = createElem('h3', 'project-name', topic.title || '');
          info.appendChild(nameP);

          // Avatar image (from user's image)
          const avatar = document.createElement('img');
          avatar.src = USER_AVATAR_DIR + topic.username + '.png';
          avatar.alt = topic.username;
          avatar.className = 'avatar';
          info.appendChild(avatar);

          // Created date and username info
          const metaP = createElem('span', 'project-meta', ` ${topic.username} ${formatRelDate(topic.created_datetime)}`);
          info.appendChild(metaP);

          // Stats using Font Awesome icons (eye for views, heart for likes)
          const statsP = createElem('span', 'project-meta');
          statsP.innerHTML = `<span style="margin-left: 10px;"><i class="fas fa-eye"></i></span> ${topic.view_count} <span style="margin-left: 10px;"><i class="fas fa-heart"></i> ${topic.like_count}</span>`;
          info.appendChild(statsP);

          footer.appendChild(info);

          // QR code image
          const qr = document.createElement('img');
          qr.src = QR_CODE_DIR + QR_CODE_PREFIX + topicId + QR_CODE_SUFFIX;
          qr.alt = 'QR Code';
          qr.className = 'qr-code';
          footer.appendChild(qr);

          card.appendChild(footer);

          // Data attributes for filtering
          card.dataset.name = (topic.name || '').toLowerCase();
          card.dataset.title = (topic.title || '').toLowerCase();
          card.dataset.username = (topic.username || '').toLowerCase();

          galleryContainer.appendChild(card);

          // Observe the image for lazy loading
          lazyLoadObserver.observe(img);
        });
      } catch (error) {
        console.error('Error initializing gallery:', error);
      }
    }

    /*********************************************************************
     * Filter functionality: filter cards as user types
     *********************************************************************/
    function setupFilters() {
      const filterInput = document.getElementById('filter-input');
      filterInput.addEventListener('input', function() {
        const filterText = this.value.trim().toLowerCase();
        const cards = document.querySelectorAll('.project-card');
        cards.forEach(card => {
          const name = card.dataset.name || '';
          const title = card.dataset.title || '';
          const username = card.dataset.username || '';
          card.style.display = 
            (name.indexOf(filterText) > -1 || 
            title.indexOf(filterText) > -1 || 
            username.indexOf(filterText) > -1) ? '' : 'none';
        });
      });
    }

    /*********************************************************************
     * Settings functionality: toggle QR code display
     *********************************************************************/
    function setupSettings() {
      const settingsBtn = document.getElementById('settings-btn');
      const settingsMenu = document.getElementById('settings-menu');
      const toggleQrItem = document.getElementById('toggle-qr');

      // Toggle dropdown menu display
      settingsBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        settingsMenu.style.display = settingsMenu.style.display === 'block' ? 'none' : 'block';
      });

      // Hide dropdown when clicking outside
      document.addEventListener('click', function() {
        settingsMenu.style.display = 'none';
      });

      // Toggle QR code visibility when clicking the menu item
      toggleQrItem.addEventListener('click', function(e) {
        e.preventDefault();
        showQRCodes = !showQRCodes;
        
        updateCardFooterPadding(showQRCodes);

        const qrCodes = document.querySelectorAll('.qr-code');
        qrCodes.forEach(qr => {
          qr.style.display = showQRCodes ? 'block' : 'none';
        });
        // Update menu text accordingly
        toggleQrItem.innerText = showQRCodes ? 'Hide QR Codes' : 'Show QR Codes';
        settingsMenu.style.display = 'none';
      });
    }

    function updateCardFooterPadding(showQRCodes) {
      
      // Determine the new padding value based on the showQRCodes flag
      const newPadding = showQRCodes ? "90px" : "0px";
      
      // Look for an existing dynamic style element
      let styleEl = document.getElementById('dynamic-card-footer-style');
      if (!styleEl) {
        // Create one if it doesn't exist
        styleEl = document.createElement('style');
        styleEl.id = 'dynamic-card-footer-style';
        document.head.appendChild(styleEl);
      }
      
      // Update the CSS rule for .card-footer
      // Using !important ensures this rule overrides the existing one.
      styleEl.textContent = `.card-footer { padding-right: ${newPadding} !important; }`;
    }    

    // Initialize gallery, filters, and settings after DOM loads
    document.addEventListener('DOMContentLoaded', function() {
      initGallery();
      setupFilters();
      setupSettings();
    });
  </script>
</body>
</html>
